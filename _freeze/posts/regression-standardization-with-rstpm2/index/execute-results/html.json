{
  "hash": "c320a5a879ae1c178806ef24b5da1c57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Regression standardization with the rstpm2 package\"\nauthor: \"Michael Dismorr\"\ndate: \"2024-07-02\"\n# date-modified: \"2024-06-01\"\ncategories: [R, regression-standardization, survival-analysis]\nimage: rstpm2_code.png\n---\n\n\n\nThis post will be another example of how to perform regression standardization in a survival analysis setting, this time using the [`rstpm2`](https://cran.r-project.org/package=rstpm2) package. In case you didn't see the previous post that describes what regression standardization is, look [here first](../regression-standardization-with-mexhaz/index.qmd). \n\nLet's start be recreating the simulated data set from the last post.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(rstpm2)\nlibrary(survival)\nlibrary(ggsurvfit)\nlibrary(ggpubr)\n\nset.seed(12345)\n\nn <- 1000\n\ndata <- data.frame(\n  age = c(sample(60:89, n/2, replace = TRUE), sample(45:74, n/2, replace = TRUE)),\n  treatment = as.factor(rep(c(\"Treatment A\", \"Treatment B\"), each = n/2)),\n  sex = sample(c(\"Male\", \"Female\"), n, replace = TRUE),\n  diabetes = sample(0:1, n, replace = TRUE)\n) %>%\n  # Shuffle the rows to mix Treatment A and Treatment B groups\n  slice_sample(n = n) %>%\n  # Generate follow-up time, depending on treatment group and age. \n  mutate(follow_up_time = round(ifelse(treatment == \"Treatment A\",\n                                       rexp(n, rate = 1 / (1200 - (age - 45) * 4)),\n                                       rexp(n, rate = 1 / (1200 - (age - 45) * 8)))),\n         follow_up_time = ifelse(follow_up_time == 0, 1, follow_up_time), \n         follow_up_years = follow_up_time / 365.25,\n         # Event probability increases with age\n         event = rbinom(n, 1, prob = plogis((age - 45) / 10)))\n```\n:::\n\n\n\nAs last time, it seems like patients who received Treatment B had better survival compared to patients who received Treatment A (p = 0.006) in crude analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyCols <- c(\"Difference\" = \"#7570b3\", \n            \"Treatment A\" = \"#1b9e77\", \n            \"Treatment B\" = \"#e7298a\")\n\nsurvfit2(Surv(follow_up_years, event) ~ treatment, data = data) %>% \n  ggsurvfit(key_glyph = \"rect\", linewidth = 0.8) + \n  scale_ggsurvfit(x_scales = list(limits = c(0, 10), \n                                  breaks = seq(0, 10, by = 2))) + \n  add_pvalue(location = \"annotation\") + \n  theme_pubr() + \n  add_risktable() + \n  scale_color_manual(aesthetics = c(\"fill\", \"color\"), \n                     values = myCols, \n                     breaks = c(\"Treatment B\", \"Treatment A\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nNow let's see how the survival curves look after regression standardization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit the stpm2 flexible parametric survival model\nstpm2_fit <- stpm2(Surv(follow_up_years, event) ~ treatment + age + diabetes, \n                   data = data)\n\n# Create an empty list to then populate with the predictions given\n# the different levels of treatment\npredictions <- list(1:length(levels(data$treatment)))\n\n# Loop over the different treatment levels, \n# performing prediction of type \"meansurv\" on each level\nfor(i in seq_along(levels(data$treatment))){\n  index <-  levels(data$treatment)[i] \n  predictions[[i]]  <- predict(stpm2_fit, \n                               type = \"meansurv\", \n                               newdata = transform(data, treatment = index), \n                               se.fit = T, \n                               grid = T, \n                               full = T) %>% \n    bind_cols(treatment = index)\n}\n\n# Survival difference, newdata - exposed\n# In this case Treatment B - Treatment A\nsurv_diff_plot_data <- predict(stpm2_fit, \n                    type = \"meansurvdiff\", grid = T, \n                    newdata = transform(data, treatment = \"Treatment B\"), \n                    exposed = function(df) transform(df, treatment = \"Treatment A\"), \n                    full = T, \n                    se.fit = T)\n```\n:::\n\n\n\n\nLet's plot the result. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurv_plot_data <- bind_rows(predictions) %>% \n  mutate(treatment = as.factor(treatment))\n\n\nsurv_fig <- surv_plot_data %>% \n  ggplot(aes(x = follow_up_years, y = Estimate)) +\n  geom_line(aes(col = treatment)) +\n  geom_ribbon(aes(ymin = lower, ymax = upper, fill = treatment), \n              alpha = 0.6) +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) +\n  scale_x_continuous(limits = c(0, 15)) + \n  theme_pubr() +\n  labs(x = \"Time (years)\") +\n  theme(axis.title.y = element_blank(),\n        legend.title = element_blank(),\n        legend.position.inside = c(0.85, 0.85),\n        text = element_text(size = 25)) +\n  scale_color_manual(aesthetics = c(\"fill\", \"color\"), values = myCols)\n\n\ndiff_fig <- surv_diff_plot_data %>% \n  ggplot(aes(x = follow_up_years, y = Estimate)) +\n  geom_line(col = myCols[\"Difference\"]) +\n  geom_ribbon(aes(ymin = lower, ymax = upper), \n              alpha = 0.6, \n              fill = myCols[\"Difference\"]) +\n  geom_hline(yintercept = 0, linetype = 2) +\n  scale_y_continuous(labels = scales::label_percent(accuracy = 1)) +\n  scale_x_continuous(limits = c(0, 15)) + \n  theme_pubr() +\n  labs(x = \"Time (years)\") +\n  theme(axis.title.y = element_blank(),\n        legend.title = element_blank(),\n        legend.position.inside = c(0.8, 0.8),\n        text = element_text(size = 25))\n\n\nsurv_comb <- ggarrange(surv_fig, diff_fig, ncol = 1)\nsurv_comb\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=1440}\n:::\n:::\n\n\nSo after regression standardization adjusting for age, it seems like Treatment A is associated with significantly improved survival compared to Treatment B. \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}